{"version":3,"file":"static/js/584.903149e6.chunk.js","mappings":"8PAEAA,IAAAA,SAAAA,QAAyB,8CAElB,IAAMC,EAAU,mCAAG,WAAOC,EAAKC,GAAZ,uFAEAH,IAAAA,IAAUE,EAAK,CACjCE,OAAQ,CACJD,KAAAA,EACAE,MAAO,KALO,cAEhBC,EAFgB,yBAQfA,EAAQC,MARO,2CAAH,wDAYVC,EAAU,mCAAG,WAAON,EAAKO,GAAZ,uFAEAT,IAAAA,IAAUE,EAAKO,GAFf,cAEhBH,EAFgB,yBAGfA,EAAQC,MAHO,2CAAH,wDCfvB,EAAiC,iCAAjC,EAA8E,4BAA9E,EAAmH,yB,SC2BnH,EAzBiB,SAAC,GAAiF,IAAD,IAA9EG,KAAQC,EAAsE,EAAtEA,GAAIC,EAAkE,EAAlEA,OAAQC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,YAAeC,EAAkB,EAAlBA,YAEtEC,EAAW,mCAAG,WAAOP,EAAII,EAAWC,GAAtB,gFAEVG,EAAe,CACjBJ,UAAWC,EAAcD,EAAY,EAAIA,EAAY,EACrDC,aAAcA,GAJF,SAOOR,EAAW,UAAD,OAAWG,GAAMQ,GAPlC,OAOVC,EAPU,OAQhBH,EAAYG,GARI,2CAAH,0DAWjB,OAEI,iCACI,gBAAKC,IAAKT,EAAQU,IAAKT,EAAMU,UAAWC,KACxC,wBAAKX,KACL,yBAAIC,EAAJ,cACA,yBAAIC,EAAUU,eAAe,SAA7B,iBACA,mBAAQC,QAAS,kBAAMR,EAAYP,EAAII,EAAWC,EAAjC,EAA+CO,UAAsB,UAAXP,EAAiBQ,EAAqBA,GAAjH,SAAgIR,EAAc,YAAc,aAGvK,ECzBD,EAA4B,4BAA5B,EAA0E,kCCmB1E,EAjBiB,SAAC,GAAgC,IAA9BW,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAEvB,OACI,eAAIL,UAAWC,EAAf,SACCG,EAAME,KAAI,SAAAnB,GACP,OACI,eAAkBa,UAAWC,EAA7B,UACI,SAAC,EAAD,CAAUd,KAAMA,EAAOO,YAAaW,KAD/BlB,EAAKC,GAIrB,KAKR,E,8BCkCD,EA9Ce,WACX,OAA0BmB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAYC,EAAAA,EAAAA,SAAO,GAEnBC,EAAW,mCAAG,WAAMJ,GAAN,gFAEVK,EAAWC,KAAKC,MAAMP,EAAMQ,OAAS,EAAI,GAF/B,kBAKatC,EAAW,SAAUmC,GALlC,OAKFI,EALE,OAMRR,GAAS,SAAAS,GAAS,wBAAQA,IAAR,OAAsBD,GAAtB,IANV,gDAQRE,EAAAA,OAAAA,QAAe,sEARP,yDAAH,uDAYjBC,EAAAA,EAAAA,YAAU,WACHV,EAAUW,UAIbX,EAAUW,SAAU,EACpBT,EAAYJ,GAEf,GAAE,CAACE,EAAWF,IAaf,OACI,iCACI,SAAC,EAAAc,QAAD,CAASC,GAAG,IAAZ,qBACkB,IAAjBf,EAAMQ,SAAgB,SAAC,EAAD,CAAUZ,MAAOI,EAAOH,gBAdnC,SAAAmB,GAEhBf,GAAS,SAAAS,GAAS,OAAIA,EAAUZ,KAAI,SAAAmB,GAChC,OAAGA,EAAKrC,KAAOoC,EAASpC,IACb,kBAAIqC,GAASD,GAEjBC,CACN,GALa,GAOrB,IAMyB,IAAjBjB,EAAMQ,SAAgB,mBAAQb,QAAS,kBAAMS,EAAYJ,EAAlB,EAAjB,4BAGlC,C","sources":["utilites/api.js","webpack://project-test-tweets/./src/components/UserCard/UserCard.module.css?416f","components/UserCard/UserCard.jsx","webpack://project-test-tweets/./src/components/UsersList/UserList.module.css?6f1b","components/UsersList/UsersList.jsx","pages/Tweets/Tweets.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://6435ab5d83a30bc9ad671d0f.mockapi.io';\n\nexport const fetchUsers = async (url, page) => {\n\n    const request = await axios.get(url, {\n        params: {\n            page,\n            limit: 6,\n        },\n    });\n    return request.data;\n};\n\n\nexport const updateUser = async (url, newData) => {\n\n    const request = await axios.put(url, newData);\n    return request.data;\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"usersList__img\":\"UserCard_usersList__img__Kv-Bd\",\"following\":\"UserCard_following__XNKPm\",\"follow\":\"UserCard_follow__ULLLH\"};","import { updateUser } from 'utilites/api';\nimport css from './UserCard.module.css';\n\nconst UserCard = ({ item: { id, avatar, name, tweets, followers, isFollowing }, updateState }) => {\n    \n    const handleClick = async (id, followers, isFollowing) => {\n\n        const userToUpdate = {\n            followers: isFollowing ? followers - 1 : followers + 1,\n            isFollowing: !isFollowing,\n        };\n\n        const response = await updateUser(`/users/${id}`, userToUpdate);\n        updateState(response);\n    };\n\n    return (\n\n        <>\n            <img src={avatar} alt={name} className={css.usersList__img} />\n            <h2>{name}</h2>\n            <p>{tweets} TWEETS</p>\n            <p>{followers.toLocaleString('en-US')} FOLLOWERS</p>\n            <button onClick={() => handleClick(id, followers, isFollowing)} className={isFollowing ? `${css.following}` : `${css.follow}`}>{isFollowing ? 'FOLLOWING' : 'FOLLOW'}</button>\n        </>\n    );\n};\n\nexport default UserCard;","// extracted by mini-css-extract-plugin\nexport default {\"usersList\":\"UserList_usersList__YH9cS\",\"usersList__item\":\"UserList_usersList__item__bXLHJ\"};","import UserCard from \"components/UserCard/UserCard\";\nimport css from './UserList.module.css';\n\nconst UserList = ({ items, updateStateUser }) => {\n\n    return (\n        <ul className={css.usersList}>\n        {items.map(item => {\n            return (\n                <li key={item.id} className={css.usersList__item}>\n                    <UserCard item={item}  updateState={updateStateUser} />\n                </li>\n            )\n        })\n\n        }\n        </ul>\n    )\n};\n\nexport default UserList;","import UserList from \"components/UsersList/UsersList\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { fetchUsers } from \"utilites/api\";\n\nconst Tweets = () => {\n    const [users, setUsers] = useState([]);\n    const isMounted = useRef(false);\n\n    const makeRequest = async users => {\n            \n        const nextPage = Math.round(users.length / 6 + 1);\n    \n            try {\n                const result = await fetchUsers('/users', nextPage);\n                setUsers(prevState => [...prevState, ...result]);\n            } catch {\n                Notify.failure('Sorry, the request could not be processed, try reloading the page!');\n            }\n        };\n\n    useEffect(() => {\n        if(isMounted.current) {\n            return;\n        };\n\n        isMounted.current = true;\n        makeRequest(users);\n\n    }, [isMounted, users]);\n\n    const updateState = dataUser => {\n\n        setUsers(prevState => prevState.map(user => {\n            if(user.id === dataUser.id) {\n                return {...user, ...dataUser};\n            }\n            return user;\n            })\n        );\n    };\n\n    return (\n        <>\n            <NavLink to='/'>Go back</NavLink>\n            {users.length !== 0 && <UserList items={users} updateStateUser={updateState}/>}\n            {users.length !== 0 && <button onClick={() => makeRequest(users)}>Load more...</button>}\n        </>\n    );\n};\n\nexport default Tweets;"],"names":["axios","fetchUsers","url","page","params","limit","request","data","updateUser","newData","item","id","avatar","name","tweets","followers","isFollowing","updateState","handleClick","userToUpdate","response","src","alt","className","css","toLocaleString","onClick","items","updateStateUser","map","useState","users","setUsers","isMounted","useRef","makeRequest","nextPage","Math","round","length","result","prevState","Notify","useEffect","current","NavLink","to","dataUser","user"],"sourceRoot":""}